my-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka.actor.deployment {
 /myActor {
    dispatcher = my-thread-pool-dispatcher
 }
 # /myActor2{
  #  dispatcher = my-thread-pool-dispatcher1
  #}
}


akka {
  event-handlers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
}

LocalSys {
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    remote {
      transport = "akka.remote.netty.NettyRemoteTransport"
      netty.tcp {
        hostname = "192.168.56.1"
        port = 2552
      }
    }
  }
}

akka {
  actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      #myown = "kryo Serializer"
    }
  }
}

akka {
  actor {
    serialization-bindings {
      "java.io.Serializable" = java
    }
  }
}

akka {
  actor {
    deployment {
      /remoteActor {
        remote = "akka.tcp://RemoteNodeApp@192.168.56.1:2553"
      }

       /remotePool {
        router = round-robin-pool
        nr-of-instances = 100
        target.nodes = ["akka.tcp://RemoteNodeApp@192.168.56.1:2553","akka.tcp://RemoteNodeApp@192.168.56.2:2553","akka.tcp://RemoteNodeApp@192.168.56.3:2553"]
      }
    }
  }
}

MyDispatcherExample{
  defaultDispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
      parallelism-max = 6
    }
  }

  defaultDispatcher1 {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 1
      core-pool-size-factor = 2.0
      core-pool-size-max = 6
    }
  }
  pinnedDispatcher {
    type = PinnedDispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 10
    }
    throughput = 5
  }

  balancingDispatcher {
    type = akka.dispatch.BalancingDispatcherConfigurator
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 1
      core-pool-size-factor = 2.0
      core-pool-size-max = 2
    }
    throughput = 5
  }
  balancingDispatcher1 {
    type = akka.dispatch.BalancingDispatcherConfigurator
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
      parallelism-max = 6
    }
    throughput = 5
  }
  CallingThreadDispatcher {
    type = akka.testkit.CallingThreadDispatcherConfigurator
  }
}


prio-dispatcher {
  mailbox-type = "mailboxes.examples.MyPriorityMailbox"
  //Other dispatcher configuration goes here
}

prio-mailbox {
  mailbox-type = "mailboxes.examples.MyPriorityMailbox"
  //Other mailbox configuration goes here
}

akka.actor.deployment {
  /priomailboxactor {
    mailbox = prio-mailbox
  }
}

//====================Remote Node configuration=============================
RemoteSys {
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    remote {
      transport = "akka.remote.netty.NettyRemoteTransport"
      netty.tcp {
        hostname = "192.168.56.1"
        port = 2553
      }
    }
  }
}

akka {
  actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      #myown = "docs.serialization.MyOwnSerializer"
    }
  }
}

akka {
  actor {
    serialization-bindings {
      "java.io.Serializable" = java
    }
  }
}






